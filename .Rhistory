}
warning("b must be odd")
stop()
}
if(a*b < (1 + (3/2)*pi)) {
text1 = paste("a =", a, " ---",
"b =", b, " ---",
"a*b=", a*b, " ---",
"(1 + (3/2)*pi)=", (1 + (3/2)*pi))
print(text1)
stop("a*b must be larger than (1 + (3/2)*pi) or else the series diverges")
}
########### Calculating series of a^n * cos(b^n pi x) -----------------------
f = vector()
for(n in 1:max){
if(((a^n)*cos((b^n)*pi*x) > eps) == TRUE) {
f[n] = (a^n)*cos((b^n)*pi*x)
} else {
fn = TRUE
}
if(fn == TRUE) {
stop()
}
}
f = sum(f)
return(f)
}
weierstrass(2)
weierstrass <- function(x,
a = .5,
b = 15,
eps = .001,
max = 1000
) {
####### checking for conditions of convergence and some flow control --------------------
if(((a < 0) | (a > 1)) == TRUE) {
print("a must be positive and smaller than 1")
}
Atest = ifelse((a < 0) | (a > 1),
TRUE,
FALSE)
###
if(is_odd(b) == FALSE) {
print("b must be odd")
}
Btest = is_odd(b)
###
if(is_odd(b) == FALSE) {
if(Atest == TRUE) {
warning("a must be smaller than 1")
warning("b must be odd")
stop()
}
warning("b must be odd")
stop()
}
if(a*b < (1 + (3/2)*pi)) {
text1 = paste("a =", a, " ---",
"b =", b, " ---",
"a*b=", a*b, " ---",
"(1 + (3/2)*pi)=", (1 + (3/2)*pi))
print(text1)
stop("a*b must be larger than (1 + (3/2)*pi) or else the series diverges")
}
########### Calculating series of a^n * cos(b^n pi x) -----------------------
f = vector()
for(n in 1:max){
if(((a^n)*cos((b^n)*pi*x) > eps) == TRUE) {
f[n] = (a^n)*cos((b^n)*pi*x)
fn = FALSE
} else {
fn = TRUE
}
if(fn == TRUE) {
stop()
}
}
f = sum(f)
return(f)
}
weierstrass(2)
weierstrass <- function(x,
a = .5,
b = 15,
eps = .01,
max = 1000
) {
####### checking for conditions of convergence and some flow control --------------------
if(((a < 0) | (a > 1)) == TRUE) {
print("a must be positive and smaller than 1")
}
Atest = ifelse((a < 0) | (a > 1),
TRUE,
FALSE)
###
if(is_odd(b) == FALSE) {
print("b must be odd")
}
Btest = is_odd(b)
###
if(is_odd(b) == FALSE) {
if(Atest == TRUE) {
warning("a must be smaller than 1")
warning("b must be odd")
stop()
}
warning("b must be odd")
stop()
}
if(a*b < (1 + (3/2)*pi)) {
text1 = paste("a =", a, " ---",
"b =", b, " ---",
"a*b=", a*b, " ---",
"(1 + (3/2)*pi)=", (1 + (3/2)*pi))
print(text1)
stop("a*b must be larger than (1 + (3/2)*pi) or else the series diverges")
}
########### Calculating series of a^n * cos(b^n pi x) -----------------------
f = vector()
for(n in 1:max){
if(((a^n)*cos((b^n)*pi*x) > eps) == TRUE) {
f[n] = (a^n)*cos((b^n)*pi*x)
fn = FALSE
} else {
fn = TRUE
}
if(fn == TRUE) {
stop()
}
}
f = sum(f)
return(f)
}
weierstrass(2)
weierstrass <- function(x,
a = .5,
b = 15,
eps = .01,
max = 1000
) {
####### checking for conditions of convergence and some flow control --------------------
if(((a < 0) | (a > 1)) == TRUE) {
print("a must be positive and smaller than 1")
}
Atest = ifelse((a < 0) | (a > 1),
TRUE,
FALSE)
###
if(is_odd(b) == FALSE) {
print("b must be odd")
}
Btest = is_odd(b)
###
if(is_odd(b) == FALSE) {
if(Atest == TRUE) {
warning("a must be smaller than 1")
warning("b must be odd")
stop()
}
warning("b must be odd")
stop()
}
if(a*b < (1 + (3/2)*pi)) {
text1 = paste("a =", a, " ---",
"b =", b, " ---",
"a*b=", a*b, " ---",
"(1 + (3/2)*pi)=", (1 + (3/2)*pi))
print(text1)
stop("a*b must be larger than (1 + (3/2)*pi) or else the series diverges")
}
########### Calculating series of a^n * cos(b^n pi x) -----------------------
f = vector()
for(n in 1:max){
if(((a^n)*cos((b^n)*pi*x) > eps) == TRUE) {
f[n] = (a^n)*cos((b^n)*pi*x)
fn = FALSE
} else {
fn = TRUE
}
if(fn == TRUE) break
}
f = sum(f)
return(f)
}
weierstrass(2)
is_even <- function(x) {
return(is_odd(x))
}
library(roxygen2)
library(devtools)
document()
check()
check()
check()
check()
heck()
document()
build()
check()
check()
build()
build()
library(dplyr)
a = seq(1,100)
a %>% dirichlet_energy()
b = seq(1,100)
b = b - 80
b = b/2
dada = data.frame(a = a, b = b)
dada %>% dirichlet_energy()
check()
build()
dada %>% dirichlet_energy()
document()
document()
check()
weierstrass <- function(x,
a = .5,
b = 15,
eps = .01,
max = 1000
) {
####### checking for conditions of convergence and some flow control --------------------
if(((a < 0) | (a > 1)) == TRUE) {
print("a must be positive and smaller than 1")
}
Atest = ifelse((a < 0) | (a > 1),
TRUE,
FALSE)
###
if(is_odd(b) == FALSE) {
print("b must be odd")
}
Btest = is_odd(b)
###
if(is_odd(b) == FALSE) {
if(Atest == TRUE) {
warning("a must be smaller than 1")
warning("b must be odd")
stop()
}
warning("b must be odd")
stop()
}
if(a*b < (1 + (3/2)*pi)) {
text1 = paste("a =", a, " ---",
"b =", b, " ---",
"a*b=", a*b, " ---",
"(1 + (3/2)*pi)=", (1 + (3/2)*pi))
print(text1)
stop("a*b must be larger than (1 + (3/2)*pi) or else the series diverges")
}
########### Calculating series of a^n * cos(b^n pi x) -----------------------
f = vector()
for(n in 1:max){
if(((a^n)*cos((b^n)*pi*x) > eps) == TRUE) {
f[n] = (a^n)*cos((b^n)*pi*x)
fn = FALSE
} else {
fn = TRUE
}
if(fn == TRUE) break
}
f = sum(f)
return(f)
}
vetor = seq(-100, 100, by = .01)
sinal = weierstrass(vetor)
is_odd <- function(x) {
result = vector(length = length(x))
for(i in 1:length(x)) {
result[i] = ifelse(x[i] %% 2 == 1, TRUE, FALSE)
}
return(result)
}
sinal = weierstrass(vetor)
warnings()
weierstrass <- function(x,
a = .5,
b = 15,
eps = .01,
max = 1000
) {
####### checking for conditions of convergence and some flow control --------------------
if(((a < 0) | (a > 1)) == TRUE) {
print("a must be positive and smaller than 1")
}
Atest = ifelse((a < 0) | (a > 1),
TRUE,
FALSE)
###
if(is_odd(b) == FALSE) {
print("b must be odd")
}
Btest = is_odd(b)
###
if(is_odd(b) == FALSE) {
if(Atest == TRUE) {
message("a must be smaller than 1")
message("b must be odd")
stop()
}
message("b must be odd")
stop()
}
if(a*b < (1 + (3/2)*pi)) {
text1 = paste("a =", a, " ---",
"b =", b, " ---",
"a*b=", a*b, " ---",
"(1 + (3/2)*pi)=", (1 + (3/2)*pi))
print(text1)
stop("a*b must be larger than (1 + (3/2)*pi) or else the series diverges")
}
########### Calculating series of a^n * cos(b^n pi x) -----------------------
f = vector()
for(n in 1:max){
a = ((a^n)*cos((b^n)*pi*x))
if(a > eps == TRUE) {
f[n] = a
fn = FALSE
} else {
fn = TRUE
}
if(fn == TRUE) break
}
f = sum(f)
return(f)
}
weierstrass <- function(x,
a = .5,
b = 15,
eps = .01,
max = 1000
) {
####### checking for conditions of convergence and some flow control --------------------
if(((a < 0) | (a > 1)) == TRUE) {
print("a must be positive and smaller than 1")
}
Atest = ifelse((a < 0) | (a > 1),
TRUE,
FALSE)
###
if(is_odd(b) == FALSE) {
print("b must be odd")
}
Btest = is_odd(b)
###
if(is_odd(b) == FALSE) {
if(Atest == TRUE) {
message("a must be smaller than 1")
message("b must be odd")
stop()
}
message("b must be odd")
stop()
}
if(a*b < (1 + (3/2)*pi)) {
text1 = paste("a =", a, " ---",
"b =", b, " ---",
"a*b=", a*b, " ---",
"(1 + (3/2)*pi)=", (1 + (3/2)*pi))
print(text1)
stop("a*b must be larger than (1 + (3/2)*pi) or else the series diverges")
}
########### Calculating series of a^n * cos(b^n pi x) -----------------------
f = vector()
for(n in 1:max){
a = ((a^n)*cos((b^n)*pi*x))
if(a > eps == TRUE) {
f[n] = a
fn = FALSE
} else {
fn = TRUE
}
if(fn == TRUE) break
}
f = sum(f)
return(f)
}
weierstrass <- function(x,
a = .5,
b = 15,
eps = .01,
max = 1000
) {
####### checking for conditions of convergence and some flow control --------------------
if(((a < 0) | (a > 1)) == TRUE) {
print("a must be positive and smaller than 1")
}
Atest = ifelse((a < 0) | (a > 1),
TRUE,
FALSE)
###
if(is_odd(b) == FALSE) {
print("b must be odd")
}
Btest = is_odd(b)
###
if(is_odd(b) == FALSE) {
if(Atest == TRUE) {
message("a must be smaller than 1")
message("b must be odd")
stop()
}
message("b must be odd")
stop()
}
if(a*b < (1 + (3/2)*pi)) {
text1 = paste("a =", a, " ---",
"b =", b, " ---",
"a*b=", a*b, " ---",
"(1 + (3/2)*pi)=", (1 + (3/2)*pi))
print(text1)
stop("a*b must be larger than (1 + (3/2)*pi) or else the series diverges")
}
########### Calculating series of a^n * cos(b^n pi x) -----------------------
f = vector()
for(n in 1:max){
a = ((a^n)*cos((b^n)*pi*x))
if(a > eps) {
f[n] = a
fn = FALSE
} else {
fn = TRUE
}
if(fn == TRUE) break
}
f = sum(f)
return(f)
}
sinal = weierstrass(vetor)
sinal = weierstrass(2)
sinal
weierstrass <- function(x,
a = .5,
b = 15,
eps = .01,
max = 1000
) {
####### checking for conditions of convergence and some flow control --------------------
if(((a < 0) | (a > 1)) == TRUE) {
print("a must be positive and smaller than 1")
}
Atest = ifelse((a < 0) | (a > 1),
TRUE,
FALSE)
###
if(is_odd(b) == FALSE) {
print("b must be odd")
}
###
if(is_odd(b) == FALSE) {
if(Atest == TRUE) {
message("a must be smaller than 1")
message("b must be odd")
stop()
}
message("b must be odd")
stop()
}
if(a*b < (1 + (3/2)*pi)) {
text1 = paste("a =", a, " ---",
"b =", b, " ---",
"a*b=", a*b, " ---",
"(1 + (3/2)*pi)=", (1 + (3/2)*pi))
print(text1)
stop("a*b must be larger than (1 + (3/2)*pi) or else the series diverges")
}
########### Calculating series of a^n * cos(b^n pi x) -----------------------
### if x is an integer or dbl
if(is.vector(x) == FALSE) {
f = vector()
for(n in 1:max){
a = ((a^n)*cos((b^n)*pi*x))
if(a > eps) {
f[n] = a
fn = FALSE
} else {
fn = TRUE
}
if(fn == TRUE) break
}
f = sum(f)
return(f)
}
}
v = rnorm(200)
A = as.matrix(v, nrow = 30)
A
A = matrix(v, nrow = 30)
A = matrix(v, nrow = 40)
A
euclidian_norm <- function(x) {
soma = sum(x^2)
total = sqrt(soma)
return(total)
}
library(devtools)
library(roxygen2)
build()
document()
document()
document()
document()
build()
check()
document()
build()
devtools::document()
install.packages("pracma")
devtools::document()
devtools::document()
